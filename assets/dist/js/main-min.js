"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"===_typeof(e)&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){n.r(t);var r=n(1),o=n.n(r),s=n(2);document.addEventListener("DOMContentLoaded",function(){Object(s.default)(),o()()},!1)},function(e,t,n){var r="bfred-it:object-fit-images",o=/(object-fit|object-position)\s*:\s*([-.\w\s%]+)/g,s="undefined"==typeof Image?{style:{"object-position":1}}:new Image,i="object-fit"in s.style,a="object-position"in s.style,c="background-size"in s.style,u="string"==typeof s.currentSrc,l=s.getAttribute,f=s.setAttribute,p=!1;function d(e,t,n){var r="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='"+(t||1)+"' height='"+(n||0)+"'%3E%3C/svg%3E";l.call(e,"src")!==r&&f.call(e,"src",r)}function m(e,t){e.naturalWidth?t(e):setTimeout(m,100,e,t)}function y(e){var t=function(e){for(var t,n=getComputedStyle(e).fontFamily,r={};null!==(t=o.exec(n));)r[t[1]]=t[2];return r}(e),n=e[r];if(t["object-fit"]=t["object-fit"]||"fill",!n.img){if("fill"===t["object-fit"])return;if(!n.skipTest&&i&&!t["object-position"])return}if(!n.img){n.img=new Image(e.width,e.height),n.img.srcset=l.call(e,"data-ofi-srcset")||e.srcset,n.img.src=l.call(e,"data-ofi-src")||e.src,f.call(e,"data-ofi-src",e.src),e.srcset&&f.call(e,"data-ofi-srcset",e.srcset),d(e,e.naturalWidth||e.width,e.naturalHeight||e.height),e.srcset&&(e.srcset="");try{!function(e){var t={get:function(t){return e[r].img[t||"src"]},set:function(t,n){return e[r].img[n||"src"]=t,f.call(e,"data-ofi-"+n,t),y(e),t}};Object.defineProperty(e,"src",t),Object.defineProperty(e,"currentSrc",{get:function(){return t.get("currentSrc")}}),Object.defineProperty(e,"srcset",{get:function(){return t.get("srcset")},set:function(e){return t.set(e,"srcset")}})}(e)}catch(e){window.console&&console.warn("https://bit.ly/ofi-old-browser")}}!function(e){if(e.srcset&&!u&&window.picturefill){var t=window.picturefill._;e[t.ns]&&e[t.ns].evaled||t.fillImg(e,{reselect:!0}),e[t.ns].curSrc||(e[t.ns].supported=!1,t.fillImg(e,{reselect:!0})),e.currentSrc=e[t.ns].curSrc||e.src}}(n.img),e.style.backgroundImage='url("'+(n.img.currentSrc||n.img.src).replace(/"/g,'\\"')+'")',e.style.backgroundPosition=t["object-position"]||"center",e.style.backgroundRepeat="no-repeat",e.style.backgroundOrigin="content-box",/scale-down/.test(t["object-fit"])?m(n.img,function(){n.img.naturalWidth>e.width||n.img.naturalHeight>e.height?e.style.backgroundSize="contain":e.style.backgroundSize="auto"}):e.style.backgroundSize=t["object-fit"].replace("none","auto").replace("fill","100% 100%"),m(n.img,function(t){d(e,t.naturalWidth,t.naturalHeight)})}function v(e,t){var n=!p&&!e;if(t=t||{},e=e||"img",a&&!t.skipTest||!c)return!1;"img"===e?e=document.getElementsByTagName("img"):"string"==typeof e?e=document.querySelectorAll(e):"length"in e||(e=[e]);for(var o=0;o<e.length;o++)e[o][r]=e[o][r]||{skipTest:t.skipTest},y(e[o]);n&&(document.body.addEventListener("load",function(e){"IMG"===e.target.tagName&&v(e.target,{skipTest:t.skipTest})},!0),p=!0,e="img"),t.watchMQ&&window.addEventListener("resize",v.bind(null,e,{skipTest:t.skipTest}))}v.supportsObjectFit=i,v.supportsObjectPosition=a,function(){function e(e,t){return e[r]&&e[r].img&&("src"===t||"srcset"===t)?e[r].img:e}a||(HTMLImageElement.prototype.getAttribute=function(t){return l.call(e(this,t),t)},HTMLImageElement.prototype.setAttribute=function(t,n){return f.call(e(this,t),t,String(n))})}(),e.exports=v},function(e,t,n){function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function s(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={mimeType:t.mimeType||null,onBeforeSend:t.onBeforeSend||Function.prototype,onSuccess:t.onSuccess||Function.prototype,onError:t.onError||Function.prototype,onComplete:t.onComplete||Function.prototype},r=Array.isArray(e)?e:[e],o=Array.apply(null,Array(r.length)).map(function(e){return null});function s(){return!("<"===(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").trim().charAt(0))}function i(e,t){n.onError(e,r[t],t)}function a(e,t){var s=n.onSuccess(e,r[t],t);e=!1===s?"":s||e,o[t]=e,-1===o.indexOf(null)&&n.onComplete(o)}var c=document.createElement("a");r.forEach(function(e,t){if(c.setAttribute("href",e),c.href=String(c.href),Boolean(document.all&&!window.atob)&&c.host.split(":")[0]!==location.host.split(":")[0]){if(c.protocol===location.protocol){var r=new XDomainRequest;r.open("GET",e),r.timeout=0,r.onprogress=Function.prototype,r.ontimeout=Function.prototype,r.onload=function(){s(r.responseText)?a(r.responseText,t):i(r,t)},r.onerror=function(e){i(r,t)},setTimeout(function(){r.send()},0)}else console.warn("Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (".concat(e,")")),i(null,t)}else{var o=new XMLHttpRequest;o.open("GET",e),n.mimeType&&o.overrideMimeType&&o.overrideMimeType(n.mimeType),n.onBeforeSend(o,e,t),o.onreadystatechange=function(){4===o.readyState&&(200===o.status&&s(o.responseText)?a(o.responseText,t):i(o,t))},o.send()}})}function i(e){var t={cssComments:/\/\*[\s\S]+?\*\//g,cssImports:/(?:@import\s*)(?:url\(\s*)?(?:['"])([^'"]*)(?:['"])(?:\s*\))?(?:[^;]*;)/g},n={rootElement:e.rootElement||document,include:e.include||'style,link[rel="stylesheet"]',exclude:e.exclude||null,filter:e.filter||null,useCSSOM:e.useCSSOM||!1,onBeforeSend:e.onBeforeSend||Function.prototype,onSuccess:e.onSuccess||Function.prototype,onError:e.onError||Function.prototype,onComplete:e.onComplete||Function.prototype},r=Array.apply(null,n.rootElement.querySelectorAll(n.include)).filter(function(e){return t=e,r=n.exclude,!(t.matches||t.matchesSelector||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector).call(t,r);var t,r}),o=Array.apply(null,Array(r.length)).map(function(e){return null});function i(){if(-1===o.indexOf(null)){var e=o.join("");n.onComplete(e,o,r)}}function c(e,t,r,a){var c=n.onSuccess(e,r,a);(function e(t,r,o,i){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[];var c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[];var l=u(t,o,c);l.rules.length?s(l.absoluteUrls,{onBeforeSend:function(e,t,o){n.onBeforeSend(e,r,t)},onSuccess:function(e,t,o){var s=n.onSuccess(e,r,t),i=u(e=!1===s?"":s||e,t,c);return i.rules.forEach(function(t,n){e=e.replace(t,i.absoluteRules[n])}),e},onError:function(n,s,u){a.push({xhr:n,url:s}),c.push(l.rules[u]),e(t,r,o,i,a,c)},onComplete:function(n){n.forEach(function(e,n){t=t.replace(l.rules[n],e)}),e(t,r,o,i,a,c)}}):i(t,a)})(e=void 0!==c&&!1===Boolean(c)?"":c||e,r,a,function(e,s){null===o[t]&&(s.forEach(function(e){return n.onError(e.xhr,r,e.url)}),!n.filter||n.filter.test(e)?o[t]=e:o[t]="",i())})}function u(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o={};return o.rules=(e.replace(t.cssComments,"").match(t.cssImports)||[]).filter(function(e){return-1===r.indexOf(e)}),o.urls=o.rules.map(function(e){return e.replace(t.cssImports,"$1")}),o.absoluteUrls=o.urls.map(function(e){return a(e,n)}),o.absoluteRules=o.rules.map(function(e,t){var r=o.urls[t],s=a(o.absoluteUrls[t],n);return e.replace(r,s)}),o}r.length?r.forEach(function(e,t){var r=e.getAttribute("href"),u=e.getAttribute("rel"),l="LINK"===e.nodeName&&r&&u&&"stylesheet"===u.toLowerCase(),f="STYLE"===e.nodeName;if(l)s(r,{mimeType:"text/css",onBeforeSend:function(t,r,o){n.onBeforeSend(t,e,r)},onSuccess:function(n,o,s){var i=a(r,location.href);c(n,t,e,i)},onError:function(r,s,a){o[t]="",n.onError(r,e,s),i()}});else if(f){var p=e.textContent;n.useCSSOM&&(p=Array.apply(null,e.sheet.cssRules).map(function(e){return e.cssText}).join("")),c(p,t,e,location.href)}else o[t]="",i()}):n.onComplete("",[])}function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:location.href,n=document.implementation.createHTMLDocument(""),r=n.createElement("base"),o=n.createElement("a");return n.head.appendChild(r),n.body.appendChild(o),r.href=t,o.href=e,o.href}n.r(t);var c=u;function u(e,t,n){e instanceof RegExp&&(e=l(e,n)),t instanceof RegExp&&(t=l(t,n));var r=f(e,t,n);return r&&{start:r[0],end:r[1],pre:n.slice(0,r[0]),body:n.slice(r[0]+e.length,r[1]),post:n.slice(r[1]+t.length)}}function l(e,t){var n=t.match(e);return n?n[0]:null}function f(e,t,n){var r,o,s,i,a,c=n.indexOf(e),u=n.indexOf(t,c+1),l=c;if(c>=0&&u>0){for(r=[],s=n.length;l>=0&&!a;)l==c?(r.push(l),c=n.indexOf(e,l+1)):1==r.length?a=[r.pop(),u]:((o=r.pop())<s&&(s=o,i=u),u=n.indexOf(t,l+1)),l=c<u&&c>=0?c:u;r.length&&(a=[s,i])}return a}function p(e){var t=r({},{onlyVars:!1,removeComments:!1},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{});function n(e){throw new Error("CSS parse error: ".concat(e))}function o(t){var n=t.exec(e);if(n)return e=e.slice(n[0].length),n}function s(){return o(/^{\s*/)}function i(){return o(/^}/)}function a(){o(/^\s*/)}function u(){if(a(),"/"===e[0]&&"*"===e[1]){for(var t=2;e[t]&&("*"!==e[t]||"/"!==e[t+1]);)t++;if(!e[t])return n("end of comment is missing");var r=e.slice(2,t);return e=e.slice(t+2),{type:"comment",comment:r}}}function l(){for(var e,n=[];e=u();)n.push(e);return t.removeComments?[]:n}function f(){for(a();"}"===e[0];)n("extra closing bracket");var t=o(/^(("(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^{])+)/);if(t)return t[0].trim().replace(/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*\/+/g,"").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g,function(e){return e.replace(/,/g,"‌")}).split(/\s*(?![^(]*\)),\s*/).map(function(e){return e.replace(/\u200C/g,",")})}function p(){o(/^([;\s]*)+/);var e=/\/\*[^*]*\*+([^\/*][^*]*\*+)*\//g,t=o(/^(\*?[-#\/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);if(t){if(t=t[0].trim(),!o(/^:\s*/))return n("property missing ':'");var r=o(/^((?:\/\*.*?\*\/|'(?:\\'|.)*?'|"(?:\\"|.)*?"|\((\s*'(?:\\'|.)*?'|"(?:\\"|.)*?"|[^)]*?)\s*\)|[^};])+)/),s={type:"declaration",property:t.replace(e,""),value:r?r[0].replace(e,"").trim():""};return o(/^[;\s]*/),s}}function d(){if(!s())return n("missing '{'");for(var e,t=l();e=p();)t.push(e),t=t.concat(l());return i()?t:n("missing '}'")}function m(){a();for(var e,t=[];e=o(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/);)t.push(e[1]),o(/^,\s*/);if(t.length)return{type:"keyframe",values:t,declarations:d()}}function y(){if(a(),"@"===e[0]){var r=function(){var e=o(/^@([-\w]+)?keyframes\s*/);if(e){var t=e[1];if(!(e=o(/^([-\w]+)\s*/)))return n("@keyframes missing name");var r,a=e[1];if(!s())return n("@keyframes missing '{'");for(var c=l();r=m();)c.push(r),c=c.concat(l());return i()?{type:"keyframes",name:a,vendor:t,keyframes:c}:n("@keyframes missing '}'")}}()||function(){var e=o(/^@supports *([^{]+)/);if(e)return{type:"supports",supports:e[1].trim(),rules:g()}}()||function(){if(o(/^@host\s*/))return{type:"host",rules:g()}}()||function(){var e=o(/^@media *([^{]+)/);if(e)return{type:"media",media:e[1].trim(),rules:g()}}()||function(){var e=o(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);if(e)return{type:"custom-media",name:e[1].trim(),media:e[2].trim()}}()||function(){if(o(/^@page */))return{type:"page",selectors:f()||[],declarations:d()}}()||function(){var e=o(/^@([-\w]+)?document *([^{]+)/);if(e)return{type:"document",document:e[2].trim(),vendor:e[1]?e[1].trim():null,rules:g()}}()||function(){if(o(/^@font-face\s*/))return{type:"font-face",declarations:d()}}()||function(){var e=o(/^@(import|charset|namespace)\s*([^;]+);/);if(e)return{type:e[1],name:e[2].trim()}}();if(r&&t.onlyVars){var c=!1;if(r.declarations)c=r.declarations.some(function(e){return/var\(/.test(e.value)});else c=(r.keyframes||r.rules||[]).some(function(e){return(e.declarations||[]).some(function(e){return/var\(/.test(e.value)})});return c?r:{}}return r}}function v(){if(t.onlyVars){var r=c("{","}",e);if(r){var o=-1!==r.pre.indexOf(":root")&&/--\S*\s*:/.test(r.body),s=/var\(/.test(r.body);if(!o&&!s)return e=e.slice(r.end+1),{}}}var i=f()||[],a=t.onlyVars?d().filter(function(e){var t=i.some(function(e){return-1!==e.indexOf(":root")})&&/^--\S/.test(e.property),n=/var\(/.test(e.value);return t||n}):d();return i.length||n("selector missing"),{type:"rule",selectors:i,declarations:a}}function g(t){if(!t&&!s())return n("missing '{'");for(var r,o=l();e.length&&(t||"}"!==e[0])&&(r=y()||v());)r.type&&o.push(r),o=o.concat(l());return t||i()?o:n("missing '}'")}return{type:"stylesheet",stylesheet:{rules:g(!0),errors:[]}}}u.range=f;var d="--",m="var",y={dom:{},temp:{},user:{}};function v(e){var t,n,o=r({},{fixNestedCalc:!0,onlyVars:!1,persist:!1,preserve:!1,variables:{},onWarning:function(){}},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}),s=o.persist?y.dom:y.temp=JSON.parse(JSON.stringify(y.dom)),i=p(e,{onlyVars:o.onlyVars});if(i.stylesheet.rules.forEach(function(e){var t=[];if("rule"===e.type&&1===e.selectors.length&&":root"===e.selectors[0]&&(e.declarations.forEach(function(e,n){var r=e.property,o=e.value;r&&0===r.indexOf(d)&&(s[r]=o,t.push(n))}),!o.preserve))for(var n=t.length-1;n>=0;n--)e.declarations.splice(t[n],1)}),Object.keys(y.user).forEach(function(e){s[e]=y.user[e]}),Object.keys(o.variables).length){var a={declarations:[],selectors:[":root"],type:"rule"};Object.keys(o.variables).forEach(function(e){var t="--".concat(e.replace(/^-+/,"")),n=o.variables[e];o.persist&&(y.user[t]=n),s[t]!==n&&(s[t]=n,a.declarations.push({type:"declaration",property:t,value:n}))}),o.preserve&&a.declarations.length&&i.stylesheet.rules.push(a)}return function e(t,n){t.rules.forEach(function(r){r.rules?e(r,n):r.keyframes?r.keyframes.forEach(function(e){"keyframe"===e.type&&n(e.declarations,r)}):r.declarations&&n(r.declarations,t)})}(i.stylesheet,function(e,t){for(var n,r,i,a=0;a<e.length;a++)i=(n=e[a]).value,"declaration"===n.type&&i&&-1!==i.indexOf(m+"(")&&(r=g(i,s,o))!==n.value&&(o.preserve?(e.splice(a,0,{type:n.type,property:n.property,value:r}),a++):n.value=r)}),o.fixNestedCalc&&(t=i.stylesheet.rules,n=/(-[a-z]+-)?calc\(/,t.forEach(function(e){e.declarations&&e.declarations.forEach(function(e){for(var t=e.value,r="";n.test(t);){var o=c("calc(",")",t||"");for(t=t.slice(o.end);n.test(o.body);){var s=c(n,")",o.body);o.body="".concat(s.pre,"(").concat(s.body,")").concat(s.post)}r+="".concat(o.pre,"calc(").concat(o.body),r+=n.test(t)?"":")".concat(o.post)}e.value=r||e.value})})),function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2?arguments[2]:void 0,r={charset:function(e){return"@charset "+e.name+";"},comment:function(e){return 0===e.comment.indexOf("__CSSVARSPONYFILL")?"/*"+e.comment+"*/":""},"custom-media":function(e){return"@custom-media "+e.name+" "+e.media+";"},declaration:function(e){return e.property+":"+e.value+";"},document:function(e){return"@"+(e.vendor||"")+"document "+e.document+"{"+o(e.rules)+"}"},"font-face":function(e){return"@font-face{"+o(e.declarations)+"}"},host:function(e){return"@host{"+o(e.rules)+"}"},import:function(e){return"@import "+e.name+";"},keyframe:function(e){return e.values.join(",")+"{"+o(e.declarations)+"}"},keyframes:function(e){return"@"+(e.vendor||"")+"keyframes "+e.name+"{"+o(e.keyframes)+"}"},media:function(e){return"@media "+e.media+"{"+o(e.rules)+"}"},namespace:function(e){return"@namespace "+e.name+";"},page:function(e){return"@page "+(e.selectors.length?e.selectors.join(", "):"")+"{"+o(e.declarations)+"}"},rule:function(e){var t=e.declarations;if(t.length)return e.selectors.join(",")+"{"+o(t)+"}"},supports:function(e){return"@supports "+e.supports+"{"+o(e.rules)+"}"}};function o(e){for(var o="",s=0;s<e.length;s++){var i=e[s];n&&n(i);var a=r[i.type](i);a&&(o+=a,a.length&&i.selectors&&(o+=t))}return o}return o(e.stylesheet.rules)}(i)}function g(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3?arguments[3]:void 0;if(-1===e.indexOf("var("))return e;var o=c("(",")",e);return o?"var"===o.pre.slice(-3)?0===o.body.trim().length?(n.onWarning("var() must contain a non-whitespace string"),e):o.pre.slice(0,-3)+function(e){var o=e.split(",")[0].replace(/[\s\n\t]/g,""),s=(e.match(/(?:\s*,\s*){1}(.*)?/)||[])[1],i=t.hasOwnProperty(o)?String(t[o]):void 0,a=i||(s?String(s):void 0),c=r||e;return i||n.onWarning('variable "'.concat(o,'" is undefined')),a&&"undefined"!==a&&a.length>0?g(a,t,n,c):"var(".concat(c,")")}(o.body)+g(o.post,t,n):o.pre+"(".concat(g(o.body,t,n),")")+g(o.post,t,n):(-1!==e.indexOf("var(")&&n.onWarning('missing closing ")" in the value "'.concat(e,'"')),e)}var h="css-vars-ponyfill",b="undefined"!=typeof window,S=b&&window.CSS&&window.CSS.supports&&window.CSS.supports("(--a: 0)"),E="cssVars(): ",w={rootElement:b?document:null,shadowDOM:!1,include:"style,link[rel=stylesheet]",exclude:"",variables:{},fixNestedCalc:!0,onlyLegacy:!0,onlyVars:!1,preserve:!1,silent:!1,updateDOM:!0,updateURLs:!0,watch:null,onBeforeSend:function(){},onSuccess:function(){},onWarning:function(){},onError:function(){},onComplete:function(){}},O={cssComments:/\/\*[\s\S]+?\*\//g,cssKeyframes:/@(?:-\w*-)?keyframes/,cssRootRules:/(?::root\s*{\s*[^}]*})/g,cssUrls:/url\((?!['"]?(?:data|http|\/\/):)['"]?([^'")]*)['"]?\)/g,cssVars:/(?:(?::root\s*{\s*[^;]*;*\s*)|(?:var\(\s*))(--[^:)]+)(?:\s*[:)])/},x=null,C=null,k=!1;function j(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=r({},w,e),n=h;function s(e,n,r,o){t.silent||console.error("".concat(E).concat(e,"\n"),n),t.onError(e,n,r,o)}function a(e){t.silent||console.warn("".concat(E).concat(e)),t.onWarning(e)}if(t.exclude="#".concat(n)+(t.exclude?",".concat(t.exclude):""),t._benchmark=t._benchmark?t._benchmark:_(),b)if(!1===t.watch&&x&&x.disconnect(),t.watch)!function(e,t){if(!window.MutationObserver)return;var n=function(e){return"LINK"===e.tagName&&-1!==(e.getAttribute("rel")||"").indexOf("stylesheet")},r=function(e){return"STYLE"===e.tagName&&(!t||e.id!==t)};x&&x.disconnect();e.watch=w.watch,(x=new MutationObserver(function(t){var o=t.some(function(e){var t=!1;if("attributes"===e.type)t=n(e.target)||r(e.target);else if("childList"===e.type){var o=Array.apply(null,e.addedNodes),s=Array.apply(null,e.removedNodes);t=[].concat(o,s).some(function(e){var t=n(e)&&!e.disabled,o=r(e)&&O.cssVars.test(e.textContent);return t||o})}return t});o&&T(e)})).observe(document.documentElement,{attributes:!0,attributeFilter:["disabled","href"],childList:!0,subtree:!0})}(t,n),T(t);else if("loading"!==document.readyState){var c=t.shadowDOM||t.rootElement.shadowRoot||t.rootElement.host;if(S&&t.onlyLegacy){if(t.updateDOM){var u=t.rootElement.host||(t.rootElement===document?document.documentElement:t.rootElement);Object.keys(t.variables).forEach(function(e){var n="--".concat(e.replace(/^-+/,"")),r=t.variables[e];u.style.setProperty(n,r)})}}else i(c&&!k?{rootElement:w.rootElement,include:w.include,exclude:t.exclude,onSuccess:function(e,t,n){return(e.match(O.cssRootRules)||[]).join("")||!1},onComplete:function(e,n,r){v(e,{persist:!0}),k=!0,j(t)}}:{rootElement:t.rootElement,include:t.include,exclude:t.exclude,filter:t.onlyVars?O.cssVars:null,onBeforeSend:t.onBeforeSend,onSuccess:function(e,n,r){var o=t.onSuccess(e,n,r);(e=void 0!==o&&!1===Boolean(o)?"":o||e,n.setAttribute("data-cssvars",""),t.updateURLs)&&(e.replace(O.cssComments,"").match(O.cssUrls)||[]).forEach(function(t){var n=t.replace(O.cssUrls,"$1"),o=A(n,r);e=e.replace(t,t.replace(n,o))});return e},onError:function(e,t,n){var r=e.responseURL||A(n,location.href),o=e.statusText?"(".concat(e.statusText,")"):"Unspecified Error"+(0===e.status?" (possibly CORS related)":"");s("CSS XHR Error: ".concat(r," ").concat(e.status," ").concat(o),t,e,r)},onComplete:function(e,i,c){var u,l=JSON.stringify({include:t.include,exclude:t.exclude,variables:t.variables,fixNestedCalc:t.fixNestedCalc,onlyVars:t.onlyVars,preserve:t.preserve,silent:t.silent,updateURLs:t.updateURLs}),f=t.rootElement.querySelector("#".concat(n))||document.createElement("style"),p=f.__cssVars||{},d=p.cssText===e&&p.settings===l;if(d)e=f.textContent,t.silent||console.info("".concat(E,"No changes"),f);else{f.__cssVars={cssText:e,settings:l},e=i.map(function(e,t){return O.cssVars.test(e)?e:"/*__CSSVARSPONYFILL-".concat(t,"__*/")}).join("");try{e=v(e,{fixNestedCalc:t.fixNestedCalc,onlyVars:t.onlyVars,persist:t.updateDOM,preserve:t.preserve,variables:t.variables,onWarning:a}),u=O.cssKeyframes.test(e),e=e.replace(/\/\*__CSSVARSPONYFILL-(\d+)__\*\//g,function(e,t){return i[t]})}catch(e){var m=!1;i.forEach(function(e,n){try{e=v(e,t)}catch(e){var r=c[n-0];m=!0,s(e.message,r)}}),m||s(e.message||e)}}if(t.shadowDOM)for(var g,h=[t.rootElement].concat(o(t.rootElement.querySelectorAll("*"))),b=0;g=h[b];++b){if(g.shadowRoot&&g.shadowRoot.querySelector("style"))j(r({},t,{rootElement:g.shadowRoot,variables:y.dom}))}if(!d&&c&&c.length){var S=t.rootElement.querySelectorAll("link[data-cssvars],style[data-cssvars]")||t.rootElement.querySelectorAll('link[rel+="stylesheet"],style'),w=S?S[S.length-1]:null;if(w)w.parentNode.insertBefore(f,w.nextSibling);else(t.rootElement.head||t.rootElement.body||t.rootElement).appendChild(f);t.updateDOM&&(f.setAttribute("id",n),f.textContent=e,u&&function(e){var t=["animation-name","-moz-animation-name","-webkit-animation-name"].filter(function(e){return getComputedStyle(document.body)[e]})[0];if(t){for(var n=e.getElementsByTagName("*"),r=[],o=0,s=n.length;o<s;o++){var i=n[o],a=getComputedStyle(i)[t];"none"!==a&&(i.style[t]+="__CSSVARSPONYFILL-KEYFRAMES__",r.push(i))}document.body.offsetHeight;for(var c=0,u=r.length;c<u;c++){var l=r[c].style;l[t]=l[t].replace("__CSSVARSPONYFILL-KEYFRAMES__","")}}}(t.rootElement)),t.onComplete(e,f,JSON.parse(JSON.stringify(t.updateDOM?y.dom:y.temp)),_()-t._benchmark)}}})}else document.addEventListener("DOMContentLoaded",function t(n){j(e),document.removeEventListener("DOMContentLoaded",t)})}function T(e){clearTimeout(C),C=setTimeout(function(){e._benchmark=null,j(e)},100)}function A(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:location.href,n=document.implementation.createHTMLDocument(""),r=n.createElement("base"),o=n.createElement("a");return n.head.appendChild(r),n.body.appendChild(o),r.href=t,o.href=e,o.href}function _(){return b&&(window.performance||{}).now?window.performance.now():(new Date).getTime()}t.default=j}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
